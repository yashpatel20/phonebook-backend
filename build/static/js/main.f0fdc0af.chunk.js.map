{"version":3,"sources":["components/Person.js","services/phonebook.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Person","props","name","number","value","onClick","handleDelete","style","color","baseUrl","axios","get","then","res","data","newObject","post","catch","error","id","put","delete","console","log","Notification","message","className","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","newFilterName","setNewFilterName","showAll","setShowAll","notifMessage","setNotifMessage","useEffect","phonebook","deletePerson","event","findPerson","find","entry","target","empty","rows","filter","person","map","key","onChange","onSubmit","preventDefault","newEntry","changedPerson","returnedPerson","initialEntries","concat","type","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f0fdc0af.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Person = props => {\n  return (\n    <div>\n      <span>\n        {props.name} {props.number}\n      </span>\n      <span>\n        <button\n          value={props.name}\n          onClick={props.handleDelete}\n          style={{ color: \"blue\" }}\n        >\n          delete\n        </button>\n      </span>\n    </div>\n  );\n};\n\nexport default Person;\n","import axios from \"axios\";\n//add /api when building\nconst baseUrl = \"/api/persons\";\n\nconst getAll = () => {\n  const req = axios.get(baseUrl);\n  return req.then(res => res.data);\n};\n\nconst create = newObject => {\n  const req = axios.post(baseUrl, newObject);\n  return req.then(res => res.data).catch(error => error);\n};\n\nconst update = (id, newObject) => {\n  const req = axios.put(`${baseUrl}/${id}`, newObject);\n  return req.then(res => res.data);\n};\n\nconst deleteEntry = id => {\n  const req = axios.delete(`${baseUrl}/${id}`);\n  return req.then(res => {\n    console.log(res);\n    return res.data;\n  });\n};\n\nexport default { getAll, create, update, deleteEntry };\n","import React from \"react\";\nimport \"./Notification.css\";\n\nconst Notification = props => {\n  let style = \"\";\n  if (props.message == null) return null;\n  if (props.message[0]) style = \"successful\";\n  else style = \"unsuccessful\";\n  return <div className={style}>{props.message[1]}</div>;\n};\n\nexport default Notification;\n","import React, { useState, useEffect } from \"react\";\nimport Person from \"./components/Person\";\nimport phonebook from \"./services/phonebook\";\nimport Notification from \"./components/Notification\";\n\nconst App = () => {\n  //states\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [newFilterName, setNewFilterName] = useState(\"\");\n  const [showAll, setShowAll] = useState(true);\n  const [notifMessage, setNotifMessage] = useState([true, \"Read successful\"]);\n\n  //fetch data\n  useEffect(() => {\n    phonebook.getAll().then(data => setPersons(data));\n  }, []);\n  //Create new Entry\n  const addPerson = event => {\n    event.preventDefault();\n    const newEntry = {\n      name: newName,\n      number: newNumber\n    };\n    //check if name already exists, if number is different then update else do nothing\n    const findPerson = persons.find(\n      entry => entry.name === newEntry.name && entry.number !== newEntry.number\n    );\n    if (findPerson) {\n      const changedPerson = { ...findPerson, number: newEntry.number };\n      phonebook\n        .update(findPerson.id, changedPerson)\n        .then(returnedPerson => {\n          setPersons(\n            persons.map(person =>\n              person.id !== findPerson.id ? person : returnedPerson\n            )\n          );\n          setNotifMessage([true, \"Update successful\"]);\n        })\n        .catch();\n      //then update\n    } else {\n      phonebook\n        .create(newEntry)\n        .then(initialEntries => {\n          setPersons(persons.concat(initialEntries));\n          setNotifMessage([true, \"Create successful\"]);\n          setNewName(\"\");\n          setNewNumber(\"\");\n        })\n        .catch(error => {\n          console.log(error);\n          setNotifMessage([false, error.message]);\n        });\n    }\n  };\n\n  //Delete Entry\n  const deletePerson = event => {\n    const findPerson = persons.find(entry => entry.name === event.target.value);\n    phonebook.deleteEntry(findPerson.id).then(empty => {\n      setNotifMessage([true, \"Delete successful\"]);\n      phonebook.getAll().then(data => setPersons(data));\n    });\n  };\n\n  //handlers\n  const handleNameChange = event => setNewName(event.target.value);\n  const handleNumberChange = event => setNewNumber(event.target.value);\n  const handleFilterNameChange = event => {\n    setNewFilterName(event.target.value);\n    setShowAll(false);\n  };\n\n  //use regex to filter\n  const personsToShow = showAll\n    ? persons\n    : persons.filter(person => person.name === newFilterName);\n  const rows = personsToShow.map(person => {\n    return (\n      <div>\n        <Person\n          key={person.name}\n          name={person.name}\n          number={person.number}\n          handleDelete={deletePerson}\n        />\n      </div>\n    );\n  });\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notifMessage} />\n      <div>\n        Filter:{\" \"}\n        <input value={newFilterName} onChange={handleFilterNameChange} />\n      </div>\n      <h2>Add a new</h2>\n      <form onSubmit={addPerson}>\n        <div>\n          name: <input value={newName} onChange={handleNameChange} />\n        </div>\n        <div>\n          number: <input value={newNumber} onChange={handleNumberChange} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n      <h2>Numbers</h2>\n      <div>{rows}</div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}